{
  "folderName": "commands",
  "folderPath": ".autodoc/docs/json/src/cli/commands",
  "url": "https://github.com/context-labs/babyagi-ts/.autodoc/docs/json/src/cli/commands",
  "files": [],
  "folders": [
    {
      "folderName": "init",
      "folderPath": ".autodoc/docs/json/src/cli/commands/init",
      "url": "https://github.com/context-labs/babyagi-ts/.autodoc/docs/json/src/cli/commands/init",
      "files": [
        {
          "fileName": "index.ts",
          "filePath": "src/cli/commands/init/index.ts",
          "url": "https://github.com/context-labs/babyagi-ts/src/cli/commands/init/index.ts",
          "summary": "This code is responsible for initializing and configuring a BabyAGI agent. It provides an interactive command-line interface for users to set up their agent's configuration, which is then saved to a `babyagi.config.json` file.\n\nThe `makeConfigTemplate` function creates a default configuration object with optional values provided by the user. It takes an optional `config` parameter and returns a `BabyAGIConfig` object with default values for `name`, `objective`, `initialTask`, `llm`, and `root`.\n\nThe `init` function is the main entry point for initializing the agent. It takes an optional `config` parameter, which defaults to the result of `makeConfigTemplate()`. The function first checks if a `babyagi.config.json` file already exists in the specified `root` directory. If it does, the user is prompted to confirm whether they want to overwrite the existing configuration.\n\nNext, the user is prompted to provide values for the agent's `name`, `objective`, `initialTask`, and `llm` (language learning model). The `llm` prompt provides a list of available models, including GPT-3.5 Turbo, GPT-4 8K (Early Access), and GPT-4 32K (Early Access). The user's input is then used to create a new configuration object using the `makeConfigTemplate` function.\n\nFinally, the new configuration is written to the `babyagi.config.json` file in the specified `root` directory, and a success message is displayed, instructing the user to run `babyagi start` to start the agent.\n\nExample usage:\n\n```javascript\nimport { init } from './path/to/this/file';\n\n// Initialize a new BabyAGI agent with default configuration\nawait init();\n\n// Initialize a new BabyAGI agent with custom configuration\nawait init({\n  name: 'MyAgent',\n  objective: 'Answer questions',\n  initialTask: 'Learn about the topic',\n  llm: LLMModels.GPT3,\n  root: './my-agent',\n});\n```\n\nThis code is essential for setting up a BabyAGI agent with the desired configuration, allowing users to easily customize their agent's behavior and underlying language model.",
          "questions": "1. **What is the purpose of the `makeConfigTemplate` function?**\n\n   The `makeConfigTemplate` function is used to create a default configuration object for the BabyAGI project. It takes an optional `config` parameter and returns a new configuration object with default values for any missing properties.\n\n2. **How does the `init` function handle existing `babyagi.config.json` files?**\n\n   The `init` function checks if a `babyagi.config.json` file already exists in the specified location. If it does, the user is prompted to confirm whether they want to overwrite the existing configuration. If the user chooses not to overwrite, the process exits.\n\n3. **What are the available LLM models in the `init` function's `questions` array?**\n\n   The available LLM models are GPT-3.5 Turbo, GPT-4 8K (Early Access), and GPT-4 32K (Early Access). The user is prompted to select one of these models during the initialization process."
        }
      ],
      "folders": [],
      "summary": "The `init` command in the `index.ts` file is responsible for initializing and configuring a BabyAGI agent. It provides an interactive command-line interface for users to set up their agent's configuration, which is then saved to a `babyagi.config.json` file. This code is essential for setting up a BabyAGI agent with the desired configuration, allowing users to easily customize their agent's behavior and underlying language model.\n\nThe `makeConfigTemplate` function creates a default configuration object with optional values provided by the user. It takes an optional `config` parameter and returns a `BabyAGIConfig` object with default values for `name`, `objective`, `initialTask`, `llm`, and `root`.\n\nThe `init` function is the main entry point for initializing the agent. It takes an optional `config` parameter, which defaults to the result of `makeConfigTemplate()`. The function first checks if a `babyagi.config.json` file already exists in the specified `root` directory. If it does, the user is prompted to confirm whether they want to overwrite the existing configuration.\n\nNext, the user is prompted to provide values for the agent's `name`, `objective`, `initialTask`, and `llm` (language learning model). The `llm` prompt provides a list of available models, including GPT-3.5 Turbo, GPT-4 8K (Early Access), and GPT-4 32K (Early Access). The user's input is then used to create a new configuration object using the `makeConfigTemplate` function.\n\nFinally, the new configuration is written to the `babyagi.config.json` file in the specified `root` directory, and a success message is displayed, instructing the user to run `babyagi start` to start the agent.\n\nExample usage:\n\n```javascript\nimport { init } from './path/to/this/file';\n\n// Initialize a new BabyAGI agent with default configuration\nawait init();\n\n// Initialize a new BabyAGI agent with custom configuration\nawait init({\n  name: 'MyAgent',\n  objective: 'Answer questions',\n  initialTask: 'Learn about the topic',\n  llm: LLMModels.GPT3,\n  root: './my-agent',\n});\n```\n\nThis code plays a crucial role in the babyagi-ts project, as it allows users to set up their agent's configuration interactively. The `init` command ensures that the agent is properly configured before starting, which helps prevent potential issues during runtime. Additionally, the interactive nature of the command makes it easy for users to customize their agent's behavior and underlying language model, enabling them to create agents tailored to their specific needs.",
      "questions": ""
    },
    {
      "folderName": "run",
      "folderPath": ".autodoc/docs/json/src/cli/commands/run",
      "url": "https://github.com/context-labs/babyagi-ts/.autodoc/docs/json/src/cli/commands/run",
      "files": [
        {
          "fileName": "index.ts",
          "filePath": "src/cli/commands/run/index.ts",
          "url": "https://github.com/context-labs/babyagi-ts/src/cli/commands/run/index.ts",
          "summary": "This code defines a module for the `babyagi-ts` project that manages the execution of tasks by an AI system. The module exports a single function, `run`, which takes a `BabyAGIConfig` object as input. The main purpose of this code is to create, prioritize, and execute tasks based on the given objective and initial task.\n\nThe `run` function performs the following steps:\n\n1. Initialize the vector store, which is used to store the results of completed tasks. If the vector store does not exist, it is created with an initial document.\n\n2. Define the initial task list with the given `initialTask`.\n\n3. Define three agent functions: `taskCreationAgent`, `prioritizationAgent`, and `executionAgent`. These functions are responsible for creating new tasks based on the results of completed tasks, prioritizing the task list, and executing tasks, respectively.\n\n4. Define a `contextAgent` function, which retrieves the top completed tasks related to the given query.\n\n5. Enter an infinite loop that performs the following steps:\n\n   a. If there are tasks in the task list, print the task list and proceed with the next steps. Otherwise, wait for 1 second and check again.\n\n   b. Pop the first task from the task list and execute it using the `executionAgent` function. Store the result in the vector store.\n\n   c. Create new tasks based on the result using the `taskCreationAgent` function and add them to the task list.\n\n   d. Prioritize the task list using the `prioritizationAgent` function.\n\nHere's an example of how the `run` function might be used:\n\n```javascript\nimport babyagi from 'babyagi-ts';\n\nconst config = {\n  objective: 'Create a summary of a given text',\n  initialTask: 'Summarize the first paragraph',\n  llm: 'gpt-3.5-turbo',\n  root: './data',\n};\n\nbabyagi.run(config);\n```\n\nIn this example, the AI system will start with the initial task of summarizing the first paragraph and continue to create, prioritize, and execute tasks based on the given objective.",
          "questions": "1. **Question:** What is the purpose of the `taskCreationAgent` function and how does it work?\n   **Answer:** The `taskCreationAgent` function is responsible for creating new tasks based on the result of an execution agent. It takes the objective, result, task description, and a list of incomplete tasks as input, and returns an array of new tasks that do not overlap with the incomplete tasks.\n\n2. **Question:** How does the `contextAgent` function work and what is its role in the code?\n   **Answer:** The `contextAgent` function is responsible for providing context to the execution agent. It takes a query and the number of top results as input, creates an embedding for the query, and performs a similarity search on the vector store. It returns a sorted list of tasks based on their similarity scores.\n\n3. **Question:** What is the purpose of the `vectorStore` and how is it initialized?\n   **Answer:** The `vectorStore` is used to store and manage the embeddings of tasks and their results. It is initialized by either loading an existing vector store from the specified path or creating a new one with a sample document, and then saving it to the specified path."
        }
      ],
      "folders": [],
      "summary": "The `index.ts` file in the `run` folder is a crucial part of the `babyagi-ts` project, as it manages the execution of tasks by the AI system. The module exports a single function, `run`, which takes a `BabyAGIConfig` object as input. This function is responsible for creating, prioritizing, and executing tasks based on the given objective and initial task.\n\nThe `run` function follows these steps:\n\n1. Initializes the vector store for storing the results of completed tasks.\n2. Defines the initial task list with the given `initialTask`.\n3. Defines agent functions for task creation, prioritization, and execution.\n4. Defines a `contextAgent` function for retrieving top completed tasks related to a query.\n5. Enters an infinite loop that executes tasks, creates new tasks based on results, and prioritizes the task list.\n\nHere's an example of how the `run` function might be used:\n\n```javascript\nimport babyagi from 'babyagi-ts';\n\nconst config = {\n  objective: 'Create a summary of a given text',\n  initialTask: 'Summarize the first paragraph',\n  llm: 'gpt-3.5-turbo',\n  root: './data',\n};\n\nbabyagi.run(config);\n```\n\nIn this example, the AI system starts with the initial task of summarizing the first paragraph and continues to create, prioritize, and execute tasks based on the given objective.\n\nThe `run` function interacts with other parts of the `babyagi-ts` project by utilizing the agent functions and the vector store. The agent functions are responsible for creating new tasks, prioritizing the task list, and executing tasks. The vector store is used to store the results of completed tasks, which can be used by the `contextAgent` function to retrieve top completed tasks related to a query.\n\nThis module is essential for the overall functioning of the `babyagi-ts` project, as it drives the AI system's task execution process. Developers working with this code should be familiar with the agent functions and the vector store to understand how tasks are created, prioritized, and executed within the system.",
      "questions": ""
    }
  ],
  "summary": "The `.autodoc/docs/json/src/cli/commands` folder contains essential code for the `babyagi-ts` project, specifically for initializing and running BabyAGI agents. It consists of two subfolders: `init` and `run`.\n\nThe `init` subfolder contains the `index.ts` file, which is responsible for initializing and configuring a BabyAGI agent. It provides an interactive command-line interface for users to set up their agent's configuration, which is then saved to a `babyagi.config.json` file. This code is essential for setting up a BabyAGI agent with the desired configuration, allowing users to easily customize their agent's behavior and underlying language model.\n\nExample usage:\n\n```javascript\nimport { init } from './path/to/this/file';\n\n// Initialize a new BabyAGI agent with default configuration\nawait init();\n\n// Initialize a new BabyAGI agent with custom configuration\nawait init({\n  name: 'MyAgent',\n  objective: 'Answer questions',\n  initialTask: 'Learn about the topic',\n  llm: LLMModels.GPT3,\n  root: './my-agent',\n});\n```\n\nThe `run` subfolder contains the `index.ts` file, which manages the execution of tasks by the AI system. The module exports a single function, `run`, which takes a `BabyAGIConfig` object as input. This function is responsible for creating, prioritizing, and executing tasks based on the given objective and initial task.\n\nExample usage:\n\n```javascript\nimport babyagi from 'babyagi-ts';\n\nconst config = {\n  objective: 'Create a summary of a given text',\n  initialTask: 'Summarize the first paragraph',\n  llm: 'gpt-3.5-turbo',\n  root: './data',\n};\n\nbabyagi.run(config);\n```\n\nIn this example, the AI system starts with the initial task of summarizing the first paragraph and continues to create, prioritize, and execute tasks based on the given objective.\n\nThe `run` function interacts with other parts of the `babyagi-ts` project by utilizing the agent functions and the vector store. The agent functions are responsible for creating new tasks, prioritizing the task list, and executing tasks. The vector store is used to store the results of completed tasks, which can be used by the `contextAgent` function to retrieve top completed tasks related to a query.\n\nThis folder plays a crucial role in the babyagi-ts project, as it allows users to set up and run their agents with the desired configuration and objectives. Developers working with this code should be familiar with the agent functions and the vector store to understand how tasks are created, prioritized, and executed within the system.",
  "questions": ""
}